import TelegramBot from "node-telegram-bot-api";
import { spawn } from "child_process";
import fs from "fs";
import path from "path";
import express from "express";
import "dotenv/config";

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const token = process.env.BOT_TOKEN;
const downloadDir = "./downloads";
if (!fs.existsSync(downloadDir)) fs.mkdirSync(downloadDir);
const ytDlpPath = process.env.YTDLP_PATH || "yt-dlp";
const extraArgsRaw = (process.env.YTDLP_EXTRA_ARGS || "").trim();
const parseExtraArgs = (raw) =>
  raw
    ? raw
        .match(/(?:[^\s"]+|"[^"]*")+?/g)
        .filter(Boolean)
        .map((s) => s.replace(/^"|"$/g, ""))
    : [];
const extraArgs = parseExtraArgs(extraArgsRaw);

if (!token) {
  console.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  process.exit(1);
}

// –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ)
const allowedUsersEnv = process.env.ALLOWED_USERS || "";
const allowedUsers = allowedUsersEnv
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean)
  .map((s) => Number(s))
  .filter((n) => !Number.isNaN(n));

// HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const app = express();
const serverPort = Number(process.env.SERVER_PORT || 3000);
const publicBaseUrl = (
  process.env.PUBLIC_BASE_URL || `http://localhost:${serverPort}`
).replace(/\/$/, "");

app.use("/downloads", express.static(downloadDir));

app.listen(serverPort, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${publicBaseUrl}`);
  console.log(
    `–†–∞–∑–¥–∞—é –ø–∞–ø–∫—É ${downloadDir} –ø–æ –∞–¥—Ä–µ—Å—É ${publicBaseUrl}/downloads/`
  );
});

// —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è yt-dlp –∏ ffmpeg
import { spawnSync } from "child_process";
const checkBinary = (bin, args) => {
  try {
    const res = spawnSync(bin, args, { encoding: "utf8" });
    if (res.error) return { ok: false, error: res.error.message };
    if (res.status !== 0 && res.status !== null)
      return { ok: false, error: res.stderr || res.stdout };
    return { ok: true, stdout: res.stdout.trim() };
  } catch (e) {
    return { ok: false, error: e.message };
  }
};

const ytCheck = checkBinary(ytDlpPath, ["--version"]);
if (!ytCheck.ok) {
  console.warn(
    `yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏ '${ytDlpPath}'. –û—à–∏–±–∫–∞: ${ytCheck.error}`
  );
}
const ffmpegCheck = checkBinary("ffmpeg", ["-version"]);
if (!ffmpegCheck.ok) {
  console.warn(
    `ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –°–ª–∏—è–Ω–∏–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å. –û—à–∏–±–∫–∞: ${ffmpegCheck.error}`
  );
}

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text?.trim();

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if (!allowedUsers.includes(userId)) {
    bot.sendMessage(chatId, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É");
    return;
  }

  // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return;

  if (!text || (!text.includes("youtube.com") && !text.includes("youtu.be"))) {
    bot.sendMessage(chatId, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube üé•");
    return;
  }

  const progressMsg = await bot.sendMessage(
    chatId,
    "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –¥–æ 1080p... ‚è≥"
  );

  const outputTemplate = path.join(
    downloadDir,
    "%(title).100s - %(id)s.%(ext)s"
  );

  const args = [
    "-f",
    "bv*[height<=1080]+ba/best",
    "-o",
    outputTemplate,
    "--progress",
    "--newline",
    "--progress-template",
    "PROGRESS %(progress._percent_str)s %(progress._eta_str)s %(progress.speed)s %(progress.stage)s",
    "--print",
    "after_move:filepath",
    ...extraArgs,
    text,
  ];

  const child = spawn(ytDlpPath, args, {
    shell: false,
    env: { ...process.env, PYTHONUNBUFFERED: "1", FORCE_COLOR: "0" },
  });

  let finalFilePath = "";
  let bufferStdout = "";
  let bufferStderr = "";
  const lastErrorLines = [];
  let lastSentPercent = -1;
  let lastEditAt = 0;
  let spinnerTick = 0;
  const spinnerFrames = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]; // fallback-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const keepAlive = setInterval(async () => {
    // –ï—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –µ—â—ë –Ω–µ—Ç ‚Äî –ø–æ–∫—Ä—É—Ç–∏–º —Å–ø–∏–Ω–Ω–µ—Ä
    if (lastSentPercent < 0 && Date.now() - lastEditAt > 4000) {
      spinnerTick = (spinnerTick + 1) % spinnerFrames.length;
      try {
        await bot.editMessageText(
          `–°–∫–∞—á–∏–≤–∞—é... ${spinnerFrames[spinnerTick]} (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞/–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)`,
          { chat_id: chatId, message_id: progressMsg.message_id }
        );
        lastEditAt = Date.now();
      } catch {}
    }
  }, 4000);
  const stripAnsi = (s) => s.replace(/\x1B\[[0-?]*[ -\/]*[@-~]/g, "");

  const maybeEditProgress = async (percent, extraText) => {
    const now = Date.now();
    const rounded = Math.max(0, Math.min(100, Math.floor(percent)));
    if (rounded === lastSentPercent && now - lastEditAt < 2000) return;
    lastSentPercent = rounded;
    lastEditAt = now;
    const textProgress = `–°–∫–∞—á–∏–≤–∞—é: ${rounded}%${
      extraText ? ` | ${extraText}` : ""
    }`;
    try {
      await bot.editMessageText(textProgress, {
        chat_id: chatId,
        message_id: progressMsg.message_id,
      });
    } catch {}
  };

  const parseProgressLine = (line) => {
    // –ø—Ä–∏–º–µ—Ä: [download]  42.3% of 69.62MiB at 2.32MiB/s ETA 00:30
    const m = line.match(/([0-9]+(?:\.[0-9]+)?)%/);
    if (!m) return false;
    const percentNum = Number(m[1]);
    if (Number.isNaN(percentNum)) return false;
    const speedMatch = line.match(/(\S+\/s)/);
    const etaMatch = line.match(/ETA\s([0-9:]+)/i);
    const extraParts = [];
    if (speedMatch) extraParts.push(speedMatch[1]);
    if (etaMatch) extraParts.push(`ETA ${etaMatch[1]}`);
    const extra = extraParts.join(" ¬∑ ");
    maybeEditProgress(percentNum, extra);
    return true;
  };

  const parseProgressTemplate = (line) => {
    // –§–æ—Ä–º–∞—Ç: PROGRESS 42.3% 00:30 2.32MiB/s downloading
    if (!line.startsWith("PROGRESS ")) return false;
    const parts = line.split(/\s+/);
    if (parts.length < 5) return false;
    const percentStr = parts[1] || "0%";
    const etaStr = parts[2] || "?";
    const speedStr = parts[3] || "?";
    const stage = parts[4] || "downloading";
    const p = Number(percentStr.replace("%", ""));
    if (Number.isNaN(p)) return false;
    const stageRu =
      stage === "downloading"
        ? "—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"
        : stage.includes("post")
        ? "–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞"
        : stage.includes("merge")
        ? "—Å–ª–∏—è–Ω–∏–µ"
        : stage;
    const extra = `${stageRu} ¬∑ ${speedStr} ¬∑ ETA ${etaStr}`;
    maybeEditProgress(p, extra);
    return true;
  };

  child.stdout.on("data", async (chunk) => {
    bufferStdout += String(chunk);
    const lines = bufferStdout.split(/\r?\n/);
    bufferStdout = lines.pop() || "";
    for (const raw of lines) {
      const line = stripAnsi(raw.trim());
      if (!line) continue;
      if (parseProgressTemplate(line)) {
        // ok
      } else if (line.startsWith("[")) {
        parseProgressLine(line);
      } else {
        // –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å --print
        if (!finalFilePath && fs.existsSync(line)) finalFilePath = line;
      }
    }
  });

  child.stderr.on("data", (chunk) => {
    bufferStderr += String(chunk);
    const lines = bufferStderr.split(/\r?\n/);
    bufferStderr = lines.pop() || "";
    for (const raw of lines) {
      const line = stripAnsi(raw.trim());
      if (!line) continue;
      if (!parseProgressTemplate(line)) parseProgressLine(line);
      lastErrorLines.push(line);
      if (lastErrorLines.length > 12) lastErrorLines.shift();
    }
  });

  child.on("error", async (err) => {
    await bot.editMessageText(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`, {
      chat_id: chatId,
      message_id: progressMsg.message_id,
    });
  });

  child.on("close", async (code) => {
    clearInterval(keepAlive);
    if (code !== 0) {
      const errTail = lastErrorLines.join("\n");
      const hint =
        code === 2
          ? "\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ), –æ–±–Ω–æ–≤–∏ yt-dlp –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg."
          : "";
      await bot.editMessageText(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ (–∫–æ–¥ ${code}).${hint}\n${
          errTail ? `\n\n–õ–æ–≥: ${errTail}` : ""
        }`,
        {
          chat_id: chatId,
          message_id: progressMsg.message_id,
        }
      );
      return;
    }

    try {
      // –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏–∑ stdout, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
      if (!finalFilePath || !fs.existsSync(finalFilePath)) {
        const files = fs
          .readdirSync(downloadDir)
          .filter((f) => !f.endsWith(".part"))
          .map((f) => ({
            name: f,
            time: fs.statSync(path.join(downloadDir, f)).mtime,
          }))
          .sort((a, b) => b.time - a.time);
        finalFilePath = files[0] ? path.join(downloadDir, files[0].name) : "";
      }

      if (!finalFilePath) {
        await bot.editMessageText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.", {
          chat_id: chatId,
          message_id: progressMsg.message_id,
        });
        return;
      }

      const fileName = path.basename(finalFilePath);
      const publicUrl = `${publicBaseUrl}/downloads/${encodeURIComponent(
        fileName
      )}`;

      await bot.editMessageText(`–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${publicUrl}`, {
        chat_id: chatId,
        message_id: progressMsg.message_id,
        disable_web_page_preview: true,
      });
    } catch (e) {
      await bot.editMessageText(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${e.message}`, {
        chat_id: chatId,
        message_id: progressMsg.message_id,
      });
    }
  });
});
