import TelegramBot from "node-telegram-bot-api";
import { exec } from "child_process";
import fs from "fs";
import path from "path";
import express from "express";
import "dotenv/config";

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const token = process.env.BOT_TOKEN;
const downloadDir = "./downloads";
if (!fs.existsSync(downloadDir)) fs.mkdirSync(downloadDir);

if (!token) {
  console.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  process.exit(1);
}

// –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ)
const allowedUsersEnv = process.env.ALLOWED_USERS || "";
const allowedUsers = allowedUsersEnv
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean)
  .map((s) => Number(s))
  .filter((n) => !Number.isNaN(n));

// HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const app = express();
const serverPort = Number(process.env.SERVER_PORT || 3000);
const publicBaseUrl = (
  process.env.PUBLIC_BASE_URL || `http://localhost:${serverPort}`
).replace(/\/$/, "");

app.use("/downloads", express.static(downloadDir));

app.listen(serverPort, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${publicBaseUrl}`);
  console.log(
    `–†–∞–∑–¥–∞—é –ø–∞–ø–∫—É ${downloadDir} –ø–æ –∞–¥—Ä–µ—Å—É ${publicBaseUrl}/downloads/`
  );
});

// —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text?.trim();

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if (!allowedUsers.includes(userId)) {
    bot.sendMessage(chatId, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É");
    return;
  }

  // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return;

  if (!text || (!text.includes("youtube.com") && !text.includes("youtu.be"))) {
    bot.sendMessage(chatId, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube üé•");
    return;
  }

  bot.sendMessage(chatId, "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –¥–æ 1080p... ‚è≥");

  const outputTemplate = path.join(
    downloadDir,
    "%(title).100s - %(id)s.%(ext)s"
  );
  const cmd = `yt-dlp -f "bv*[height<=1080]+ba/best" -o "${outputTemplate}" --print after_move:filepath "${text}"`;

  exec(cmd, async (error, stdout) => {
    if (error) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: ${error.message}`);
      return;
    }

    try {
      // –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∏–∑ stdout yt-dlp
      const stdoutLines = String(stdout || "")
        .split(/\r?\n/)
        .map((l) => l.trim())
        .filter(Boolean);
      let finalFilePath = stdoutLines[stdoutLines.length - 1];

      if (!finalFilePath || !fs.existsSync(finalFilePath)) {
        // fallback: –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–∏—Å–∫–ª—é—á–∞–µ–º .part)
        const files = fs
          .readdirSync(downloadDir)
          .filter((f) => !f.endsWith(".part"))
          .map((f) => ({
            name: f,
            time: fs.statSync(path.join(downloadDir, f)).mtime,
          }))
          .sort((a, b) => b.time - a.time);
        finalFilePath = files[0] ? path.join(downloadDir, files[0].name) : "";
      }

      if (!finalFilePath) {
        await bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.");
        return;
      }

      const fileName = path.basename(finalFilePath);
      const publicUrl = `${publicBaseUrl}/downloads/${encodeURIComponent(
        fileName
      )}`;
      await bot.sendMessage(chatId, `–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ${publicUrl}`);
    } catch (e) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${e.message}`);
    }
  });
});
