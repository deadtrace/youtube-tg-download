import fs from "fs";
import path from "path";
import { downloadDir, cleanupIntervalHours, fileMaxAgeDays } from "./config.js";

class FileCleanupScheduler {
  constructor() {
    this.intervalId = null;
    this.isRunning = false;
  }

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  start() {
    if (this.intervalId) {
      console.log("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    console.log(`üßπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${cleanupIntervalHours}—á, –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤: ${fileMaxAgeDays}–¥)`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => this.cleanupOldFiles(), 60000);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    this.intervalId = setInterval(() => {
      this.cleanupOldFiles();
    }, cleanupIntervalHours * 60 * 60 * 1000);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
  async cleanupOldFiles() {
    if (this.isRunning) {
      console.log("‚è≥ –û—á–∏—Å—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
      return;
    }

    this.isRunning = true;
    const startTime = Date.now();
    
    try {
      console.log("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...");
      
      if (!fs.existsSync(downloadDir)) {
        console.log("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É");
        return;
      }

      const files = fs.readdirSync(downloadDir);
      const now = Date.now();
      const maxAgeMs = fileMaxAgeDays * 24 * 60 * 60 * 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      
      let deletedCount = 0;
      let totalSize = 0;

      for (const fileName of files) {
        const filePath = path.join(downloadDir, fileName);
        
        try {
          const stats = fs.statSync(filePath);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          if (stats.isDirectory() || fileName.endsWith('.part')) {
            continue;
          }

          const fileAge = now - stats.mtime.getTime();
          
          if (fileAge > maxAgeMs) {
            const fileSize = stats.size;
            fs.unlinkSync(filePath);
            
            deletedCount++;
            totalSize += fileSize;
            
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${fileName} (${this.formatFileSize(fileSize)}, –≤–æ–∑—Ä–∞—Å—Ç: ${this.formatAge(fileAge)})`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${fileName}:`, error.message);
        }
      }

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}–º—Å: —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${this.formatFileSize(totalSize)}`);
      
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:", error.message);
    } finally {
      this.isRunning = false;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ñ–∞–π–ª–∞
  formatAge(ageMs) {
    const days = Math.floor(ageMs / (24 * 60 * 60 * 1000));
    const hours = Math.floor((ageMs % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
    
    if (days > 0) {
      return `${days}–¥ ${hours}—á`;
    } else {
      return `${hours}—á`;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
  getFileStats() {
    try {
      if (!fs.existsSync(downloadDir)) {
        return { count: 0, totalSize: 0, oldFiles: 0 };
      }

      const files = fs.readdirSync(downloadDir);
      const now = Date.now();
      const maxAgeMs = fileMaxAgeDays * 24 * 60 * 60 * 1000;
      
      let totalSize = 0;
      let oldFiles = 0;

      for (const fileName of files) {
        const filePath = path.join(downloadDir, fileName);
        
        try {
          const stats = fs.statSync(filePath);
          
          if (!stats.isDirectory() && !fileName.endsWith('.part')) {
            totalSize += stats.size;
            
            const fileAge = now - stats.mtime.getTime();
            if (fileAge > maxAgeMs) {
              oldFiles++;
            }
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
        }
      }

      return {
        count: files.length,
        totalSize,
        oldFiles
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤:", error.message);
      return { count: 0, totalSize: 0, oldFiles: 0 };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export const cleanupScheduler = new FileCleanupScheduler();
