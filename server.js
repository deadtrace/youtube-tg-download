import express from "express";
import { downloadDir, serverPort, publicBaseUrl } from "./config.js";
import path from "path";
import fs from "fs";

// HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const app = express();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
const getMimeType = (filename) => {
  const ext = path.extname(filename).toLowerCase();
  const mimeTypes = {
    ".mp4": "video/mp4",
    ".webm": "video/webm",
    ".avi": "video/x-msvideo",
    ".mkv": "video/x-matroska",
    ".mov": "video/quicktime",
    ".flv": "video/x-flv",
    ".m4v": "video/x-m4v",
    ".3gp": "video/3gpp",
    ".mp3": "audio/mpeg",
    ".wav": "audio/wav",
    ".ogg": "audio/ogg",
    ".m4a": "audio/mp4",
    ".aac": "audio/aac",
    ".flac": "audio/flac",
  };
  return mimeTypes[ext] || "application/octet-stream";
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
const formatFileSize = (bytes) => {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
};

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
app.get("/downloads", (req, res) => {
  try {
    const files = fs
      .readdirSync(downloadDir)
      .filter((file) => !file.endsWith(".part")) // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      .map((file) => {
        const filePath = path.join(downloadDir, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          size: formatFileSize(stats.size),
          sizeBytes: stats.size,
          modified: stats.mtime.toISOString(),
          url: `${publicBaseUrl}/downloads/${encodeURIComponent(file)}`,
        };
      })
      .sort((a, b) => new Date(b.modified) - new Date(a.modified)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>–°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
          .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          h1 { color: #333; text-align: center; margin-bottom: 30px; }
          .file-list { list-style: none; padding: 0; }
          .file-item { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            padding: 15px; 
            margin: 10px 0; 
            background: #f8f9fa; 
            border-radius: 5px; 
            border-left: 4px solid #007bff;
          }
          .file-info { flex: 1; }
          .file-name { font-weight: bold; color: #333; margin-bottom: 5px; }
          .file-meta { font-size: 12px; color: #666; }
          .download-btn { 
            background: #007bff; 
            color: white; 
            padding: 8px 16px; 
            text-decoration: none; 
            border-radius: 4px; 
            font-size: 14px;
            transition: background 0.3s;
          }
          .download-btn:hover { background: #0056b3; }
          .empty { text-align: center; color: #666; font-style: italic; }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>üìÅ –°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h1>
          ${
            files.length > 0
              ? `
            <ul class="file-list">
              ${files
                .map(
                  (file) => `
                <li class="file-item">
                  <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-meta">
                      –†–∞–∑–º–µ—Ä: ${file.size} | 
                      –ò–∑–º–µ–Ω–µ–Ω: ${new Date(file.modified).toLocaleString(
                        "ru-RU"
                      )}
                    </div>
                  </div>
                  <a href="${file.url}" class="download-btn">üì• –°–∫–∞—á–∞—Ç—å</a>
                </li>
              `
                )
                .join("")}
            </ul>
          `
              : `
            <div class="empty">
              <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</p>
              <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤ Telegram –±–æ—Ç–∞</p>
            </div>
          `
          }
        </div>
      </body>
      </html>
    `;

    res.send(html);
  } catch (error) {
    res.status(500).send(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
app.get("/downloads/:filename", (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(downloadDir, filename);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if (!fs.existsSync(filePath) || !fs.statSync(filePath).isFile()) {
    return res.status(404).send("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const mimeType = getMimeType(filename);

  res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
  res.setHeader("Content-Type", mimeType);

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  res.setHeader("Pragma", "no-cache");
  res.setHeader("Expires", "0");

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
  res.sendFile(filePath);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
export const startServer = () => {
  app.listen(serverPort, () => {
    console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${publicBaseUrl}`);
    console.log(
      `–†–∞–∑–¥–∞—é –ø–∞–ø–∫—É ${downloadDir} –ø–æ –∞–¥—Ä–µ—Å—É ${publicBaseUrl}/downloads/`
    );
    console.log("üì• –§–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–æ–∫");
    console.log(
      "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${publicBaseUrl}/downloads"
    );
  });
};

export { app };
