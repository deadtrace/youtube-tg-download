import { spawn } from "child_process";
import fs from "fs";
import path from "path";
import {
  ytDlpPath,
  extraArgs,
  downloadDir,
  publicBaseUrl,
  maxTelegramFileSizeMB,
} from "./config.js";
import {
  stripAnsi,
  generateUniquePrefix,
  getFileSize,
  bytesToMB,
} from "./utils.js";

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
export class AudioDownloader {
  constructor(bot, chatId, userId) {
    this.bot = bot;
    this.chatId = chatId;
    this.userId = userId;
    this.progressMsg = null;
    this.finalFilePath = "";
    this.bufferStdout = "";
    this.bufferStderr = "";
    this.lastErrorLines = [];
    this.lastSentPercent = -1;
    this.lastEditAt = 0;
    this.spinnerTick = 0;
    this.spinnerFrames = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"];
    this.keepAlive = null;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—É–¥–∏–æ
  generateOutputTemplate() {
    const uniquePrefix = generateUniquePrefix(this.userId, this.chatId);
    return path.join(
      downloadDir,
      `${uniquePrefix} - %(title).100s - %(id)s.%(ext)s`
    );
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è yt-dlp –¥–ª—è –∞—É–¥–∏–æ
  createYtDlpArgs(url) {
    const outputTemplate = this.generateOutputTemplate();
    return [
      "-f",
      "ba[ext=m4a]/ba[ext=mp3]/ba/bestaudio",
      "--extract-audio",
      "--audio-format",
      "mp3",
      "--audio-quality",
      "128K",
      "-o",
      outputTemplate,
      "--progress",
      "--newline",
      "--progress-template",
      "PROGRESS %(progress._percent_str)s %(progress._eta_str)s %(progress.speed)s %(progress.stage)s",
      "--print",
      "after_move:filepath",
      ...extraArgs,
      url,
    ];
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Telegram
  async maybeEditProgress(percent, extraText) {
    const now = Date.now();
    const rounded = Math.max(0, Math.min(100, Math.floor(percent)));
    if (rounded === this.lastSentPercent && now - this.lastEditAt < 2000)
      return;

    this.lastSentPercent = rounded;
    this.lastEditAt = now;

    const textProgress = `–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ: ${rounded}%${
      extraText ? ` | ${extraText}` : ""
    }`;

    try {
      await this.bot.editMessageText(textProgress, {
        chat_id: this.chatId,
        message_id: this.progressMsg.message_id,
      });
    } catch {}
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ yt-dlp
  parseProgressLine(line) {
    // –ø—Ä–∏–º–µ—Ä: [download]  42.3% of 69.62MiB at 2.32MiB/s ETA 00:30
    const m = line.match(/([0-9]+(?:\.[0-9]+)?)%/);
    if (!m) return false;

    const percentNum = Number(m[1]);
    if (Number.isNaN(percentNum)) return false;

    const speedMatch = line.match(/(\S+\/s)/);
    const etaMatch = line.match(/ETA\s([0-9:]+)/i);
    const extraParts = [];

    if (speedMatch) extraParts.push(speedMatch[1]);
    if (etaMatch) extraParts.push(`ETA ${etaMatch[1]}`);

    const extra = extraParts.join(" ¬∑ ");
    this.maybeEditProgress(percentNum, extra);
    return true;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  parseProgressTemplate(line) {
    // –§–æ—Ä–º–∞—Ç: PROGRESS 42.3% 00:30 2.32MiB/s downloading
    if (!line.startsWith("PROGRESS ")) return false;

    const parts = line.split(/\s+/);
    if (parts.length < 5) return false;

    const percentStr = parts[1] || "0%";
    const etaStr = parts[2] || "?";
    const speedStr = parts[3] || "?";
    const stage = parts[4] || "downloading";

    const p = Number(percentStr.replace("%", ""));
    if (Number.isNaN(p)) return false;

    const stageRu =
      stage === "downloading"
        ? "—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"
        : stage.includes("post")
        ? "–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞"
        : stage.includes("merge")
        ? "—Å–ª–∏—è–Ω–∏–µ"
        : stage;

    const extra = `${stageRu} ¬∑ ${speedStr} ¬∑ ETA ${etaStr}`;
    this.maybeEditProgress(p, extra);
    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ stdout –æ—Ç yt-dlp
  handleStdout(chunk) {
    this.bufferStdout += String(chunk);
    const lines = this.bufferStdout.split(/\r?\n/);
    this.bufferStdout = lines.pop() || "";

    for (const raw of lines) {
      const line = stripAnsi(raw.trim());
      if (!line) continue;

      if (this.parseProgressTemplate(line)) {
        // ok
      } else if (line.startsWith("[")) {
        this.parseProgressLine(line);
      } else {
        // –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å --print
        if (!this.finalFilePath && fs.existsSync(line)) {
          this.finalFilePath = line;
        }
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ stderr –æ—Ç yt-dlp
  handleStderr(chunk) {
    this.bufferStderr += String(chunk);
    const lines = this.bufferStderr.split(/\r?\n/);
    this.bufferStderr = lines.pop() || "";

    for (const raw of lines) {
      const line = stripAnsi(raw.trim());
      if (!line) continue;

      if (!this.parseProgressTemplate(line)) {
        this.parseProgressLine(line);
      }

      this.lastErrorLines.push(line);
      if (this.lastErrorLines.length > 12) {
        this.lastErrorLines.shift();
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Telegram
  async sendAudioToTelegram(filePath) {
    try {
      const fileName = path.basename(filePath);
      await this.bot.sendAudio(this.chatId, filePath, {
        title: fileName.replace(/\.[^/.]+$/, ""), // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        performer: "YouTube Audio",
      });
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –≤ Telegram:", error.message);
      return false;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async deleteFile(filePath) {
    try {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`–§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`);
        return true;
      }
      return false;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error.message);
      return false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  async handleClose(code) {
    clearInterval(this.keepAlive);

    if (code !== 0) {
      const errTail = this.lastErrorLines.join("\n");
      const hint =
        code === 2
          ? "\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ), –æ–±–Ω–æ–≤–∏ yt-dlp –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg."
          : "";

      await this.bot.editMessageText(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ (–∫–æ–¥ ${code}).${hint}\n${
          errTail ? `\n\n–õ–æ–≥: ${errTail}` : ""
        }`,
        {
          chat_id: this.chatId,
          message_id: this.progressMsg.message_id,
        }
      );
      return;
    }

    try {
      // –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏–∑ stdout, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
      if (!this.finalFilePath || !fs.existsSync(this.finalFilePath)) {
        const files = fs
          .readdirSync(downloadDir)
          .filter((f) => !f.endsWith(".part"))
          .map((f) => ({
            name: f,
            time: fs.statSync(path.join(downloadDir, f)).mtime,
          }))
          .sort((a, b) => b.time - a.time);

        this.finalFilePath = files[0]
          ? path.join(downloadDir, files[0].name)
          : "";
      }

      if (!this.finalFilePath) {
        await this.bot.editMessageText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.", {
          chat_id: this.chatId,
          message_id: this.progressMsg.message_id,
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const fileSizeBytes = getFileSize(this.finalFilePath);
      const fileSizeMB = bytesToMB(fileSizeBytes);
      const fileName = path.basename(this.finalFilePath);

      // –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 50–ú–±, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Telegram
      if (fileSizeMB <= maxTelegramFileSizeMB) {
        await this.bot.editMessageText(
          `‚úÖ –ì–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ (${fileSizeMB.toFixed(
            1
          )}–ú–±). –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç...`,
          {
            chat_id: this.chatId,
            message_id: this.progressMsg.message_id,
          }
        );

        const sendSuccess = await this.sendAudioToTelegram(this.finalFilePath);

        if (sendSuccess) {
          // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
          await this.deleteFile(this.finalFilePath);
          await this.bot.editMessageText(
            `‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞!`,
            {
              chat_id: this.chatId,
              message_id: this.progressMsg.message_id,
            }
          );
        } else {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—à–ª—ã–π —Ñ–ª–æ—É
          const downloadUrl = `${publicBaseUrl}/force-download/${encodeURIComponent(
            fileName
          )}`;
          const viewUrl = `${publicBaseUrl}/downloads/${encodeURIComponent(
            fileName
          )}`;

          await this.bot.editMessageText(
            `‚úÖ –ì–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ (${fileSizeMB.toFixed(
              1
            )}–ú–±). –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç.\n\n` +
              `üëÅÔ∏è <a href="${viewUrl}">–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ</a>\n` +
              `üì• <a href="${downloadUrl}">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>\n` +
              `üìã <a href="${publicBaseUrl}/downloads">–í—Å–µ —Ñ–∞–π–ª—ã</a>`,
            {
              chat_id: this.chatId,
              message_id: this.progressMsg.message_id,
              disable_web_page_preview: true,
              parse_mode: "HTML",
            }
          );
        }
      } else {
        // –§–∞–π–ª –±–æ–ª—å—à–µ 50–ú–±, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—à–ª—ã–π —Ñ–ª–æ—É
        const downloadUrl = `${publicBaseUrl}/force-download/${encodeURIComponent(
          fileName
        )}`;
        const viewUrl = `${publicBaseUrl}/downloads/${encodeURIComponent(
          fileName
        )}`;

        await this.bot.editMessageText(
          `‚úÖ –ì–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ (${fileSizeMB.toFixed(
            1
          )}–ú–±). –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç.\n\n` +
            `üëÅÔ∏è <a href="${viewUrl}">–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ</a>\n` +
            `üì• <a href="${downloadUrl}">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>\n` +
            `üìã <a href="${publicBaseUrl}/downloads">–í—Å–µ —Ñ–∞–π–ª—ã</a>`,
          {
            chat_id: this.chatId,
            message_id: this.progressMsg.message_id,
            disable_web_page_preview: true,
            parse_mode: "HTML",
          }
        );
      }
    } catch (e) {
      await this.bot.editMessageText(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${e.message}`, {
        chat_id: this.chatId,
        message_id: this.progressMsg.message_id,
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  async handleError(err) {
    await this.bot.editMessageText(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: ${err.message}`,
      {
        chat_id: this.chatId,
        message_id: this.progressMsg.message_id,
      }
    );
  }

  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  async download(url) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    this.progressMsg = await this.bot.sendMessage(
      this.chatId,
      "–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ... ‚è≥"
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
    this.keepAlive = setInterval(async () => {
      if (this.lastSentPercent < 0 && Date.now() - this.lastEditAt > 4000) {
        this.spinnerTick = (this.spinnerTick + 1) % this.spinnerFrames.length;
        try {
          await this.bot.editMessageText(
            `–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ... ${
              this.spinnerFrames[this.spinnerTick]
            } (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞/–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)`,
            { chat_id: this.chatId, message_id: this.progressMsg.message_id }
          );
          this.lastEditAt = Date.now();
        } catch {}
      }
    }, 4000);

    // –ó–∞–ø—É—Å–∫–∞–µ–º yt-dlp
    const args = this.createYtDlpArgs(url);
    const child = spawn(ytDlpPath, args, {
      shell: false,
      env: { ...process.env, PYTHONUNBUFFERED: "1", FORCE_COLOR: "0" },
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    child.stdout.on("data", (chunk) => this.handleStdout(chunk));
    child.stderr.on("data", (chunk) => this.handleStderr(chunk));
    child.on("error", (err) => this.handleError(err));
    child.on("close", (code) => this.handleClose(code));
  }
}
